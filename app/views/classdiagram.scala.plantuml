@import domain.model._
@import domain.model.Property.Visibility
@import domain.model.Property.Visibility.Visibility
@import domain.model.ClassLike
@import domain.model.Interface
@(classes: Seq[ClassLike])

@visibility(vis: Visibility) = @{
    vis match {
        case Visibility.Public => "+"
        case Visibility.Protected => "#"
        case Visibility.Private => "-"
        case _ => ""
    }
}

@classType(c: ClassLike) = @{
    c match {
        case Class(_, _, true, _, _, _, _, _) => "abstract class"
        case Class(_, _, _, _, _, _, _, _) | Trait(_, _, _) => "class"
        case Interface(_,_,_) => "interface"
    }
}

@classStereotype(c: ClassLike) = @{
    c match {
        case Trait(_,_,_) => "<< (T, #FF7700) >>"
        case _ => ""
    }
}

@@startuml

set namespaceSeparator ::

@for(klass <- classes) {
@{classType(klass) } @{klass.fqcn("::") } @{classStereotype(klass) } { @klass match {
    case x: Class => {
        @for(prop <- x.properties) {@*
            *@ @visibility(prop.visibility) @prop.name : @{prop.possibleTypes.map { t => t.name }.mkString("|") }
        }
    }
    case _ => {}
}
}
}

@for(klass <- classes) {
    @klass match {
        case c: Class => {
            @c.parent.map { p => @c.fqcn("::") --|> @p.fqcn("::") }
            @c.implements.map { p => @c.fqcn("::") ..|> @p.fqcn("::") }
            @c.usesTraits.map { t => @c.fqcn("::") ..|> @t.fqcn("::") }
        }
        case c: Interface => {
            @c.parent.map { p => @c.fqcn("::") --|> @p.fqcn("::") }
        }
        case _ => {}
    }
}

    @@enduml